services:
    mongo_launcher:
        container_name: mongo_launcher
        image: mongo:7.0.4
        restart: on-failure
        networks:
            - app_network
        volumes:
            - ./docker/scripts/mongo-setup.sh:/scripts/mongo-setup.sh
        entrypoint: ['sh', '/scripts/mongo-setup.sh']
    mongo_replica_1:
        container_name: mongo_replica_1
        image: mongo:7.0.4
        ports:
            - 27017:27017
        restart: always
        entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'dbrs', '--dbpath', '/data/db', '--port', '27017']
        volumes:
            - ./.volumes/mongo/replica1:/data/db
            - ./.volumes/mongo/replica1/configdb:/data/configdb
        networks:
            - app_network
    mongo_replica_2:
        container_name: mongo_replica_2
        image: mongo:7.0.4
        ports:
            - 27018:27018
        restart: always
        entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'dbrs', '--dbpath', '/data/db', '--port', '27018']
        volumes:
            - ./.volumes/mongo/replica2:/data/db
            - ./.volumes/mongo/replica2/configdb:/data/configdb
        networks:
            - app_network
    mongo_replica_3:
        container_name: mongo_replica_3
        image: mongo:7.0.4
        ports:
            - 27019:27019
        restart: always
        entrypoint: ['/usr/bin/mongod', '--bind_ip_all', '--replSet', 'dbrs', '--dbpath', '/data/db', '--port', '27019']
        volumes:
            - ./.volumes/mongo/replica3:/data/db
            - ./.volumes/mongo/replica3/configdb:/data/configdb
        networks:
            - app_network

    minio:
        image: minio/minio
        container_name: minio
        ports:
            - '9000:9000'
            - '9001:9001'
        environment:
            MINIO_ROOT_USER: yazif
            MINIO_ROOT_PASSWORD: yazifantonio
        command: server /data --console-address ":9001"
        networks:
            - app_network
        volumes:
            - ./.volumes/minio/data:/data
    redis:
        image: redis:latest
        container_name: redis
        ports:
            - '6379:6379'
        networks:
            - app_network
    rabbitmq:
        container_name: rabbitmq
        image: rabbitmq:management
        restart: always
        ports:
            - '5672:5672'
            - '15672:15672'
        environment:
            RABBITMQ_DEFAULT_USER: admin
            RABBITMQ_DEFAULT_PASS: admin
        networks:
            - app_network
        healthcheck:
            test: ['CMD', 'rabbitmq-diagnostics', 'ping']
            interval: 5s
            timeout: 3s
            retries: 5

    types_package:
        container_name: types_package
        build:
            context: .
            dockerfile: ./docker/Dockerfile.types-dev
        restart: always
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./packages/types/lib
              target: /app/packages/types/lib
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
    database_package:
        container_name: database_package
        build:
            context: .
            dockerfile: ./docker/Dockerfile.database-dev
        restart: always
        depends_on:
            - types_package
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./packages/database/lib
              target: /app/packages/database/lib
            - type: bind
              source: ./packages/database/dist
              target: /app/packages/database/dist
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
    socket_package:
        container_name: socket_package
        build:
            context: .
            dockerfile: ./docker/Dockerfile.socket-dev
        restart: always
        depends_on:
            - database_package
            - redis_package
            - types_package
            - rabbitmq_package
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./packages/socket/lib
              target: /app/packages/socket/lib
            - type: bind
              source: ./packages/socket/dist
              target: /app/packages/socket/dist
            - type: bind
              source: ./packages/database/dist
              target: /app/packages/database/dist
            - type: bind
              source: ./packages/redis/dist
              target: /app/packages/redis/dist
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
            - type: bind
              source: ./packages/rabbitmq/dist
              target: /app/packages/rabbitmq/dist
    redis_package:
        container_name: redis_package
        build:
            context: .
            dockerfile: ./docker/Dockerfile.redis-dev
        restart: always
        depends_on:
            - types_package
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./packages/redis/lib
              target: /app/packages/redis/lib
            - type: bind
              source: ./packages/redis/dist
              target: /app/packages/redis/dist
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
    rabbitmq_package:
        container_name: rabbitmq_package
        build:
            context: .
            dockerfile: ./docker/Dockerfile.rabbitmq-dev
        restart: always
        depends_on:
            - rabbitmq
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./packages/rabbitmq/lib
              target: /app/packages/rabbitmq/lib
            - type: bind
              source: ./packages/rabbitmq/dist
              target: /app/packages/rabbitmq/dist

    api_gateway:
        container_name: api_gateway
        build:
            context: .
            dockerfile: ./docker/Dockerfile.api_gateway-dev
        env_file:
            - ./apps/api-gateway/.env
        ports:
            - 3000:3000
        restart: always
        depends_on:
            rabbitmq:
                condition: service_healthy
            mongo_replica_1:
                condition: service_started
            mongo_replica_2:
                condition: service_started
            mongo_replica_3:
                condition: service_started
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./apps/api-gateway/src
              target: /app/apps/api-gateway/src
            - type: bind
              source: ./packages/database/dist
              target: /app/packages/database/dist
            - type: bind
              source: ./packages/socket/dist
              target: /app/packages/socket/dist
            - type: bind
              source: ./packages/redis/dist
              target: /app/packages/redis/dist
            - type: bind
              source: ./packages/rabbitmq/dist
              target: /app/packages/rabbitmq/dist
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
    user_service:
        container_name: user_service
        build:
            context: .
            dockerfile: ./docker/Dockerfile.user_service-dev
        env_file:
            - ./apps/user-service/.env
        ports:
            - 8080:8080
        restart: always
        depends_on:
            - redis
            - minio
            - rabbitmq
            - mongo_replica_1
            - mongo_replica_2
            - mongo_replica_3
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./apps/user-service/src
              target: /app/apps/user-service/src
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
            - type: bind
              source: ./packages/database/dist
              target: /app/packages/database/dist
            - type: bind
              source: ./packages/socket/dist
              target: /app/packages/socket/dist
            - type: bind
              source: ./packages/redis/dist
              target: /app/packages/redis/dist
            - type: bind
              source: ./packages/rabbitmq/dist
              target: /app/packages/rabbitmq/dist
    friend_service:
        container_name: friend_service
        build:
            context: .
            dockerfile: ./docker/Dockerfile.friend_service-dev
        env_file:
            - ./apps/friend-service/.env
        ports:
            - 3001:3001
        restart: always
        depends_on:
            - redis
            - minio
            - rabbitmq
            - mongo_replica_1
            - mongo_replica_2
            - mongo_replica_3
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./apps/friend-service/src
              target: /app/apps/friend-service/src
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
            - type: bind
              source: ./packages/database/dist
              target: /app/packages/database/dist
            - type: bind
              source: ./packages/socket/dist
              target: /app/packages/socket/dist
            - type: bind
              source: ./packages/redis/dist
              target: /app/packages/redis/dist
            - type: bind
              source: ./packages/rabbitmq/dist
              target: /app/packages/rabbitmq/dist
    notification_service:
        container_name: notification_service
        build:
            context: .
            dockerfile: ./docker/Dockerfile.notification_service-dev
        env_file:
            - ./apps/notification-service/.env
        ports:
            - 4000:4000
        restart: always
        depends_on:
            rabbitmq:
                condition: service_healthy
            mongo_replica_1:
                condition: service_started
            mongo_replica_2:
                condition: service_started
            mongo_replica_3:
                condition: service_started
        networks:
            - app_network
        volumes:
            - type: bind
              source: ./apps/notification-service/src
              target: /app/apps/notification-service/src
            - type: bind
              source: ./packages/types/dist
              target: /app/packages/types/dist
            - type: bind
              source: ./packages/database/dist
              target: /app/packages/database/dist
            - type: bind
              source: ./packages/socket/dist
              target: /app/packages/socket/dist
            - type: bind
              source: ./packages/redis/dist
              target: /app/packages/redis/dist
            - type: bind
              source: ./packages/rabbitmq/dist
              target: /app/packages/rabbitmq/dist

    # mobile:
    #     container_name: mobile
    #     build:
    #         context: .
    #         dockerfile: ./docker/Dockerfile.mobile-dev
    #     ports:
    #         - 19000:19000 # Expo port
    #         - 19001:19001 # WebSocket port
    #         - 19002:19002 # Debugging port
    #     network_mode: host # Add this line
    #     # environment:
    #     #     - REACT_NATIVE_PACKAGER_HOSTNAME=10.0.0.16
    #     stdin_open: true # Keep STDIN open to allow interactive CLI
    #     tty: true # Enable terminal mode
    #     # networks:
    #     #     - app_network
    #     volumes:
    #         - type: bind
    #           source: ./apps/mobile/src
    #           target: /app/apps/mobile/src
    #         - type: bind
    #           source: ./packages/types/dist
    #           target: /app/packages/types/dist
networks:
    app_network:
        driver: bridge
